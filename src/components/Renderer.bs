sub init()
    m.scroller = m.top.findNode("scroller")
    m.top.observeField("focusedChild", "onFocus")
end sub

sub onFocus()
    ' forward focus to scroller
    if m.top.hasFocus()
        m.scroller.setFocus(true)
    end if
end sub

sub render(nodes as object)
    itemSpacings = applyDefaultInt(m.top.itemSpacings, 20)
    m.content = CreateObject("roSGNode", "LayoutGroup")
    m.content.layoutDirection = "vert"
    m.content.itemSpacings = itemSpacings

    padding = applyDefaultPadding(m.top.padding, [0, 0, 0, 0])
    width = m.top.width - padding[1] - padding[3]
    height = m.top.height - padding[0] - padding[2]

    m.children = createChildren(nodes, width)
    m.content.appendChildren(m.children)

    m.scroller.width = width
    m.scroller.height = height
    m.scroller.translation = [padding[3], padding[0]]
    m.scroller@.setContent(m.content)
end sub

function applyDefault(value as dynamic, defaultValue as dynamic) as dynamic
    if value = invalid then return defaultValue
    return value
end function

function applyDefaultStr(value as dynamic, defaultValue as dynamic) as dynamic
    if value = invalid or value = "" then return defaultValue
    return value
end function

function applyDefaultInt(value as integer, defaultValue as integer) as integer
    if value = 0 then return defaultValue
    return value
end function

function applyDefaultPadding(values as dynamic, defaultValues as object) as object
    if values = invalid then len = 0 else len = values.count()
    if len = 0
        values = defaultValues
    else if len = 1
        v0 = values[0]
        values = [v0, v0, v0, v0]
    else if len = 2
        v0 = values[0]
        v1 = values[1]
        values = [v0, v1, v0, v1]
    else if len = 3
        values[3] = values[1]
    end if
    return values
end function

function createLabel(text as string, font as object, color as string, width as integer) as object
    label = CreateObject("roSGNode", "Label")
    label.update({
        text: text
        font: font
        color: color
        wrap: width > 0
        width: width
    })
    return label
end function

function withBackground(child as object, padding as object, bgColor as string, width as integer) as object
    rect = child.boundingRect()
    block = createObject("roSGNode", "Rectangle")
    block.update({
        width: width
        height: rect.height + padding[0] + padding[2]
        color: bgColor
    })
    child.translation = [padding[3], padding[0]]
    block.appendChild(child)
    return block
end function

function collectFonts() as object
    pFont = applyDefault(m.top.font, "font:SmallSystemFont")
    quoteFont = applyDefault(m.top.quoteFont, pFont)
    codeFont = applyDefault(m.top.codeFont, pFont)
    h1Font = applyDefault(m.top.h1Font, "font:LargeBoldSystemFont")
    h2Font = applyDefault(m.top.h2Font, "font:MediumBoldSystemFont")
    h3Font = applyDefault(m.top.h3Font, "font:SmallBoldSystemFont")

    return {
        h1: h1Font
        h2: h2Font
        h3: h3Font
        quote: quoteFont
        code: codeFont
        p: pFont
    }
end function

function collectColors() as object
    pColor = applyDefaultStr(m.top.color, "0xFFFFFFFF")
    quoteColor = applyDefaultStr(m.top.quoteColor, pColor)
    quoteBg = applyDefaultStr(m.top.quoteBackground, "0xFFFFFF22")
    codeColor = applyDefaultStr(m.top.codeColor, pColor)
    codeBg = applyDefaultStr(m.top.codeBackground, "0xFFFFFF22")
    h1Color = applyDefaultStr(m.top.h1Color, pColor)
    h2Color = applyDefaultStr(m.top.h2Color, pColor)
    h3Color = applyDefaultStr(m.top.h3Color, pColor)

    return {
        h1: h1Color
        h2: h2Color
        h3: h3Color
        quote: quoteColor
        quoteBg: quoteBg
        code: codeColor
        codeBg: codeBg
        p: pColor
    }
end function

function createChildren(nodes as object, width as integer) as object
    fonts = collectFonts()
    colors = collectColors()
    quotePadding = applyDefaultPadding(m.top.quotePadding, [10, 10, 10, 10])
    codePadding = applyDefaultPadding(m.top.codePadding, [10, 10, 10, 50])

    children = []
    for each node in nodes
        if left(node.kind, 1) = "h"
            font = fonts[node.kind]
            if font = invalid then font = fonts.h3Font
            color = colors[node.kind]
            if color = invalid then color = colors.h3Color
            label = createLabel(node.data, font, color, 0)
            children.push(label)
        else if node.kind = "ul"
            label = createLabel("- " + node.data.join(chr(10) + "- "), fonts.p, colors.p, width)
            children.push(label)
        else if node.kind = "ol"
            text = ""
            for i = 0 to node.data.count() - 1
                text = text + (i + 1).toStr() + ". " + node.data[i] + chr(10)
            end for
            label = createLabel(text, fonts.p, colors.p, width)
            children.push(label)
        else if node.kind = "quote"
            label = createLabel(node.data, fonts.quote, colors.quote, width)
            block = withBackground(label, quotePadding, colors.quoteBg, width)
            children.push(block)
        else if node.kind = "code"
            label = createLabel(node.data, fonts.code, colors.code, width)
            block = withBackground(label, codePadding, colors.codeBg, width)
            children.push(block)
        else
            label = createLabel(node.data, fonts.p, colors.p, width)
            children.push(label)
        end if
    end for
    return children
end function
